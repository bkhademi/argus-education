/* global angular */

/**
 * INSPINIA - Responsive Admin Theme
 *
 */
(function () {
	angular.module('inspinia', [
		'ui.router', // Routing
		'oc.lazyLoad', // ocLazyLoad
		'ui.bootstrap', // Ui Bootstrap
		'ngResource', // Simplified REST interaction
		'satellizer', // Token Based authenticacion
		'ngStorage' // use browser Local Storage 
	]);

	angular.module("Argus", ['inspinia'])

		.config(
			['$stateProvider', '$urlRouterProvider', '$ocLazyLoadProvider', '$authProvider', '$httpProvider', '$provide',
				function ($stateProvider, $urlRouterProvider, $ocLazyLoadProvider, $authProvider, $httpProvider, $provide) {
					var redirectWhenLoggedOut =['$q','$injector', function ($q, $injector) {
						return {
							responseError: function (rejection) {
								// Need to use $injector.get to bring in $state or else we get
								// a circular dependency error
								var $state = $injector.get('$state');

								// instead of checking fora status code of 400 which might be used
								// for other reasons in laravel, we check for the specific rejection
								// reason to tell us if we need to redirect to the loggin state
								var rejectionReason = ['token_not_provided', 'token_expired', 'token_absent', 'token_invalid', 'user_not_found'];

								// Loop through each rejection reason and redirect to the login
								// state if one is encountered
								angular.forEach(rejectionReason, function (value, key) {
									if (rejection.data.error === value) {
										// if we get a rejection corresponfing to one of the reasons
										// in our array, we know we need to authenticate the user so
										// we can remove the current user from local storage
										localStorage.removeItem('user');

										// Send the user to the auth state so they can login
										$state.go('auth');
									}
								});
								return $q.reject(rejection);
							}
						};
					}];

					// Setup for the $httpInterceptor
					$provide.factory('redirectWhenLoggedOut', redirectWhenLoggedOut);

					// push the new factory onto the $http interceptor array
					$httpProvider.interceptors.push('redirectWhenLoggedOut');

					// satellizer configuration that specifies which API
					// route the JWT should be retrieved fromCharCode
					$authProvider.loginUrl = '/api/authenticate';

					$urlRouterProvider.otherwise('/auth');

					$stateProvider
						.state('auth', {
							url: '/auth',
							templateUrl: 'views/login.html',
							controller: 'AuthController as auth',
							data: {pageTitle: "Login", specialClass: "white-bg"}
						});
					$ocLazyLoadProvider.config({
						// Set to true if you want to see what and when is dynamically loaded
						debug: false
					});

				}])
		.run(['$rootScope', '$state',
			function ($rootScope, $state) {


				// $stateChangeStart is fired whenever the state changes. We can use some parameters
				// such as toState to hook into details about the state as it is changing
				$rootScope.$on('$stateChangeStart', function (event, toState) {
					// Grab the user from local storage and parse it to an object
					var user = JSON.parse(localStorage.getItem('user'));

					// If there is any user data in local storage then the user is quite
					// likely authenticated. If their token is expired, or if they are
					// otherwise not actually authenticated, they will be redirected to
					// the auth state because of the rejected request anyway
					if (user) {

						// The user's authenticated state gets flipped to
						// true so we can now show parts of the UI that rely
						// on the user being logged in
						$rootScope.authenticated = true;

						// Putting the user's data on $rootScope allows
						// us to access it anywhere across the app. Here
						// we are grabbing what is in local storage
						$rootScope.currentUser = user;
						// debugger
						// If the user is logged in and we hit the auth route we don't need
						// to stay there and can send the user to the main state
						if (toState.name === "auth") {

							// Preventing the default behavior allows us to use $state.go
							// to change states
//					event.preventDefault();
//					var route = $rootScope.currentUser.route;
							//$state.go(route);
//					var userRole = $rootScope.currentUser.role.toLowerCase();
//					var go = userRole + ".dashboard";
							// go to the "main" state which in our case is users
							//$state.go(go);//$rootScope.currentUser.role+".dashboard");
						}
					}
				});
				$rootScope.$state = $state;
			}])
		.controller('AuthController',
			['$auth', '$state', '$http', '$rootScope','StudentsService',
				function ($auth, $state, $http, $rootScope,students) {
					var vm = this;

					vm.loginError = false;
					vm.loginErrorText;
					vm.login = function () {
						var credentials = {
							email: vm.email,
							password: vm.password
						};
						// Use Satellizer's $auth service to login
						$auth.login(credentials).then(function (response) {
							// if login is successful, redirectto the users state
							//$state.go('users', {});
							return $http.get('api/authenticate/user').then(function (response) {


								// stringify the returned data to prepare it 
								// to go into local storage
								var user = JSON.stringify(response.data.user);

								//set the stringified user data into local storage
								localStorage.setItem('user', user);

								// The user's authenticated state gets flipped to true
								// so we can now show parts of the ui that relyon the
								// user being logged in
								$rootScope.authenticated = true;

								// Putting the user's data on $rootScope allows 
								// us to access it anywhere across the app
								// Putting the user's data on $rootScope allows 
								// us to access it anywhere across the app
								$rootScope.currentUser = response.data.user;
								$state.go(response.data.user.route)
//								var goto = '';
//								switch (response.data.user.role) {
//									case 'Lead GTM Coordinator':
//										goto = 'admin1';
//										break;
//									case 'AEC Coordinator':
//										goto = 'admin2';
//										break;
//									case 'O-Room Coordinator':
//										goto = 'admin3';
//										break;
//									case 'Student':
//										goto = 'student';
//										break;
//									case 'Teacher':
//										goto = 'teacher';
//										break;
//									case 'Supporting Staff':
//										goto = 'supportstaff';
//										$state.go('supportstaff.oroomActivitiLog');
//										return;
//										break;
//									case 'ISS Coordinator':
//										$state.go('iss.Lists.iss');
//										return;
//									case 'Data Staff':
//										$state.go('datastaff.reports.eod');
//										return;
//									case 'System Admin':
//										$state.go('sysadmin.dashboard');
//										return;
//									case 'Reteach Coordinator':
//										$state.go('reteach.dashboard');
//										return;
//									case 'ASP Coordinator':
//										$state.go(response.data.user.route);
//										return;
//									default:
//										console.log('unknown role');
//								}
//								//response.data.user.role.toLowerCase()
//								$state.go(goto + ".dashboard");

							});

							//handle errors
						}, function (response) {
							vm.loginError = true;
							vm.loginErrorText = response.data.error;

							// because we returned the promise in the first then 
							// we can chain the next promise to the end here
						});
					};
				}])
		.controller('MainCtrl',
			['$rootScope', '$auth', '$state',
				function ($rootScope, $auth, $state) {
					var user = JSON.parse(localStorage.getItem('user'));
					$rootScope.currentUser = user;
					// var user = $rootScope.currentUser;
					if ($rootScope.currentUser || JSON.parse(localStorage.getItem('user'))) {

						this.userName = $rootScope.currentUser.FirstName + ', '
							+ $rootScope.currentUser.LastName;//user.name;

					}
					else {
						this.userName = "Please Log In";
					}

					//    this.userName = 'Brandon Hernandez';
					//    this.helloText = 'Welcome in SeedProject';
					//    this.descriptionText = 'It is an application skeleton for a typical AngularJS web app. You can use it to quickly bootstrap your angular webapp projects and dev environment for these projects.';
					this.logout = function () {
						$auth.logout().then(function () {
							localStorage.removeItem('user');

							$rootScope.authenticated = false;

							$rootScope.currentUser = null;
							$state.go('auth');
						});
					};

					$rootScope.showFeature = function(){
						return $rootScope.currentUser.SchoolId == 4;
					};
					$rootScope.showToUser = function(){
						return $rootScope.currentUser.id == 'QXuR755nL8Fc6IQbseJyS5CPIshpJYQh7z4i6N2eYubqQ6NXtyodg3sdLUW5r8QzIG0lR7X63zJ1Op02UCOiwvKB74yh8xTt2zEupE2bRy1k04KN5mr3QyWw4Aeni6XX'
							|| $rootScope.currentUser.id == 'QXuR755nL8Fc6IQbseJyS5CPIshpJYQh7z4i6N2eYubqQ6NXtyodg3sdLUW5r8QzIG0lR7X63zJ1Op02UCOiwvKB74yh8xTt2zEupE2bRy1k04KN5mr3QyWw4Aeni6YY';
					}
				}])
		.controller('TopNavCtrl',
			['StudentsService', '$modal', '$scope', '$rootScope',
				function (students, $modal, $scope, $rootScope) {

					var vm = this;
//					vm.schoolStudents = students.query({admin: true, light: true}, function (results) {
//						return results;
//
//					}, function (error) {
//						console.log(error);
//					});
					if(!students.students)
						students.refresh()
					vm.schoolStudents = students.students;
					vm.openCreateNewStudent = function () {
						var student = {UserInfo: {}, StuInfo: {}, ProfessorClasses: []};
						var modalInstance = $modal.open({
							templateUrl: 'views/modals/CreateStudentModal.html',
							//template:'<div> MODAL : true in Referral IN </div>',
							size: 'lg',
							controller: function ($scope, student, ProfessorClassesService) {
								$scope.schools = [
									{Id: 1, Name: 'Estacado High School'},
									{Id: 2, Name: 'Dunbar College Preparatory Academy'},
									{Id: 3, Name: 'Ervin Elementary School'},
									{Id: 4, Name: 'Adrian School'}
								];
								$scope.classes = ProfessorClassesService.query();
								$scope.student = student;


							},
							resolve: {
								student: function () {
									return student;

								}
							}
						});


						modalInstance.result.then(function () {// on SUBMIT
							student.StuInfo.StudentId = student.UserInfo.UserName;
							student.UserInfo.SchoolId = student.UserInfo.SchoolId.Id;
							angular.forEach(student.ProfessorClasses, function (item) {
								console.log(item);
								item.ProfessorClassId = item.ProfessorClass.Id;
								delete item.ProfessorClass;
							});
							student.userInfo = student.UserInfo;
							students.save(student, function (data) {
								students.query({admin: true, light: true}, function (data) {
									vm.schoolStudents = data;
									students.students = data;
									$rootScope.$broadcast('studentsUpdated', {students: data});
								});



							});
						}, function () {// on modal DISMISS

						});
					};
					vm.selectedStudent = function () {
						var $item = vm.student;
						var student = students.get({id: $item.Id}, function (data) {
							var modalInstance = $modal.open({
								templateUrl: 'views/modals/ProfileModal.html',
								//template:'<div> MODAL : true in Referral IN </div>',
								size: 'lg',
								controller: function ($scope, student, StudentsService) {
									StudentsService.addTodaysAct(student);
									$scope.student = student;
								},
								resolve: {
									student: function () {
										return student;

									}
								}
							});


							modalInstance.result.then(function () {// on SUBMIT
								// post the comment and other things to the database 
								$model = null;
							}, function () {// on modal DISMISS
								console.log('dismissed');
								$label = null;
								$model = null;
								$item = null;
								vm.student = null;
							});

						});


					};

				}]);

})();

var api = "/api/";





/* global angular, d3 */

(function (app) {
	app
		.directive('dropzone', function () {
			return function (scope, element, attrs) {
				var config, dropzone;
				config = scope[attrs.dropzone];

				//create a Dropzone for the element with the given options
				dropzone = new Dropzone(element[0], config.options);

				//bind the given event handlers
				angular.forEach(config.eventHandlers, function (handler, event) {
					dropzone.on(event, handler);
				});

			};// end return
		});

}(angular.module("Argus")));

(function (app) {
	app.directive('focusMe', ['$timeout',
		function ($timeout) {
			return {
				link: function (scope, element, attrs) {
					scope.$watch(attrs.focusMe, function (value) {
						if (value === true) {
							console.log('value=', value);
							console.log('id  ', attrs.id);
							$timeout(function () {
								var chosen_container = $('#' + attrs.id).next();
								chosen_container.addClass('chosen-container-active chosen-with-drop').find('input').focus();

								//element[0].focus();
								scope[attrs.focusMe] = false;
							}, 500);
						}
					});
				}
			};
		}]);
}(angular.module("Argus")));

(function (app) {
	app
		.directive('dropzonedata', function () {
			return function (scope, element, attrs) {
				var config, dropzone, counter;
				config = scope[attrs.dropzonedata];




				if (config.variables.dropzone) { // dropzone already attached, just change method
				} else { // dropzone not attached,  add it for the first time


					//create a Dropzone for the element with the given options
					config.variables.dropzone = new Dropzone(element[0], config.options);

					//bind the given event handlers
					angular.forEach(config.eventHandlers, function (handler, event) {
						config.variables.dropzone.on(event, handler);
					});
				}

			};// end return
		});

}(angular.module("Argus")));

(function (app) {
	app
		.directive('autoResize', function () {
			return {
				restrict: "CA",
				link: function (scope, element) {
					element = element[0];
					element.addEventListener('keyup', function (event) {
						this.style.overflow = 'hidden';
						this.style.height = 0;
						this.style.height = this.scrollHeight + 'px';

					}, false);
				}
			};

		});
}(angular.module("Argus")));
(function (app) {
	app
		.directive("drawing", function () {
			return {
				restrict: "A",
				scope: {
					bw: "=width",
					bh: "=height"
				},
				link: function (scope, element) {
					var ctx = element[0].getContext('2d');
					console.log(element);
					// variable that decides if something should be drawn on mousemove
					var drawing = false;

					// the last coordinates before the current move
					var lastX;
					var lastY;

					var bw = scope.bw;
					var bh = scope.bh;
					var p = 5;


					function drawBoard() {
						for (var x = 0; x <= bw; x += 30) {
							ctx.moveTo(x + p, p);
							ctx.lineTo(x + p, bh + p);
						}


						for (var x = 0; x <= bh; x += 30) {
							ctx.moveTo(p, x + p);
							ctx.lineTo(bw + p, x + p);
						}

						ctx.strokeStyle = "lightgray";
						ctx.stroke();
					}

					drawBoard();
					function start_move(event) {

						if (event.offsetX !== undefined) {
							lastX = event.offsetX;
							lastY = event.offsetY;

						} else { // Firefox compatibility
							lastX = event.layerX - event.currentTarget.offsetLeft;
							lastY = event.layerY - event.currentTarget.offsetTop;

						}
						console.log(lastX);
						console.log(lastY);
						// begins new line
						ctx.beginPath();

						drawing = true;
					}

					element.bind('mousedown', start_move);

					function move(event) {
						if (drawing) {
							// get current mouse position
							if (event.offsetX !== undefined) {
								currentX = event.offsetX;
								currentY = event.offsetY;
							} else {
								currentX = event.layerX - event.currentTarget.offsetLeft;
								currentY = event.layerY - event.currentTarget.offsetTop;
							}

							draw(lastX, lastY, currentX, currentY);

							// set current coordinates to last one
							lastX = currentX;
							lastY = currentY;
						}

					}

					element.bind('mousemove', move);

					function up(event) {
						// stop drawing
						drawing = false;
					}
					element.bind('mouseup', up);



					// Tablet
					function onTouchMove(event) {
						if (drawing) {
							event.preventDefault();
							if (event.offsetX !== undefined) {
								currentX = event.offsetX;
								currentY = event.offsetY;
							} else {
								currentX = (event.targetTouches[0].pageX) - element.offset().left;
								currentY = (event.targetTouches[0].pageY) - element.offset().top;
							}

							draw(lastX, lastY, currentX, currentY);

							// set current coordinates to last one
							lastX = currentX;
							lastY = currentY;
						}
					}

					function onTouchStart(event) {
						drawing = true;

						lastX = (event.targetTouches[0].pageX) - element.offset().left;
						lastY = (event.targetTouches[0].pageY) - element.offset().top;

						ctx.beginPath();
					}

					function onMouseUp(event) {
						drawing = false;
					}



					element.bind('touchmove', onTouchMove, false);
					element.bind('touchstart', onTouchStart, false);
					element.bind('touchend', onMouseUp, false);
					element[0].addEventListener('touchmove', onTouchMove, false);
					element[0].addEventListener('touchstart', onTouchStart, false);
					element[0].addEventListener('touchend', onMouseUp, false);
					// canvas reset
					function reset() {
						element[0].width = element[0].width;
					}

					function draw(lX, lY, cX, cY) {

						// line from
						ctx.moveTo(lX, lY);
						// to
						ctx.lineTo(cX, cY);
						// color
						ctx.strokeStyle = "#4bf";
						// draw it
						ctx.stroke();
					}
					console.log(element);
				}
			};
		});

}(angular.module("Argus")));
(function (app) {
	// USAGE   <student student="studentObject" ></student
	/*
	 where studentObject is
	 $scope.studentObject = {}
	 */
	app
		.directive("student", function () {
			var directive = {};
			directive.restrict = "E";
			directive.templateUrl = "views/otherItems/sampleStuProfile.html";
			directive.scope = {
				student: "=student"
			};

			directive.compile = function (element, attributes) {
				element.css('border', '1px solid, #cccccc');

				var linkFunction = function ($scope, element, attributes) {
					//element.html("student: <b>" + $scope.student.name + "</b>, Roll No: </b>");
					//element.css('background-color', '#ff00ff');
				};
				return linkFunction;
			};
			return directive;
		});

}(angular.module("Argus")));
(function (app) {
	app
		.directive("gaugeChart", [function () {
				return {
					restrict: "A",
					scope: {
						data: "=",
						options: "="
					},
					link: function (scope, ele) {
						var data, gauge, options;
						return data = scope.data, options = scope.options, gauge = new Gauge(ele[0]).setOptions(options), gauge.maxValue = data.maxValue, gauge.animationSpeed = data.animationSpeed, gauge.set(data.val);
					}
				};
			}])
		.directive("flotChart", [function () {
				return {
					restrict: "A",
					scope: {
						data: "=",
						options: "="
					},
					link: function (scope, ele) {
						var data, options, plot;
						return data = scope.data, options = scope.options, plot = $.plot(ele[0], data, options);
					}
				};
			}])
		.directive("flotChartRealtime", [function () {
				return {
					restrict: "A",
					link: function (scope, ele) {
						var data, getRandomData, plot, totalPoints, update, updateInterval;
						return data = [], totalPoints = 300, getRandomData = function () {
							var i, prev, res, y;
							for (data.length > 0 && (data = data.slice(1)); data.length < totalPoints; )
								prev = data.length > 0 ? data[data.length - 1] : 50, y = prev + 10 * Math.random() - 5, 0 > y ? y = 0 : y > 100 && (y = 100), data.push(y);
							for (var res = [], i = 0; i < data.length; )
								res.push([i, data[i]]), ++i;
							return res;
						}, update = function () {
							plot.setData([getRandomData()]), plot.draw(), setTimeout(update, updateInterval);
						}, data = [], totalPoints = 300, updateInterval = 200, plot = $.plot(ele[0], [getRandomData()], {
							series: {
								lines: {
									show: !0,
									fill: !0
								},
								shadowSize: 0
							},
							yaxis: {
								min: 0,
								max: 100
							},
							xaxis: {
								show: !1
							},
							grid: {
								hoverable: !0,
								borderWidth: 1,
								borderColor: "#eeeeee"
							},
							colors: ["#cadcaf"]
						}), update();
					}
				};
			}])
		.directive("sparkline", [function () {
				return {
					restrict: "A",
					scope: {
						data: "=",
						options: "="
					},
					link: function (scope, ele) {
						var data, options, sparkResize, sparklineDraw;
						return data = scope.data, options = scope.options, sparkResize = void 0, sparklineDraw = function () {
							return ele.sparkline(data, options);
						}, $(window).resize(function () {
							return clearTimeout(sparkResize), sparkResize = setTimeout(sparklineDraw, 200);
						}), sparklineDraw();
					}
				};
			}])
		.directive("morrisChart", [function () {
				return {
					restrict: "A",
					scope: {
						data: "="
					},
					link: function (scope, ele, attrs) {

						var colors, data, func, options;
						switch (data = scope.data, attrs.type) {
							case "line":
								return colors = void 0 === attrs.lineColors || "" === attrs.lineColors ? null : JSON.parse(attrs.lineColors), options = {
									element: ele[0],
									data: data,
									xkey: attrs.xkey,
									ykeys: JSON.parse(attrs.ykeys),
									labels: JSON.parse(attrs.labels),
									lineWidth: attrs.lineWidth || 2,
									lineColors: colors || ["#0b62a4", "#7a92a3", "#4da74d", "#afd8f8", "#edc240", "#cb4b4b", "#9440ed"],
									resize: !0
								}, new Morris.Line(options);
							case "area":
								return colors = void 0 === attrs.lineColors || "" === attrs.lineColors ? null : JSON.parse(attrs.lineColors), options = {
									element: ele[0],
									data: data,
									xkey: attrs.xkey,
									ykeys: JSON.parse(attrs.ykeys),
									labels: JSON.parse(attrs.labels),
									lineWidth: attrs.lineWidth || 2,
									lineColors: colors || ["#0b62a4", "#7a92a3", "#4da74d", "#afd8f8", "#edc240", "#cb4b4b", "#9440ed"],
									behaveLikeLine: attrs.behaveLikeLine || !1,
									fillOpacity: attrs.fillOpacity || "auto",
									pointSize: attrs.pointSize || 4,
									resize: !0
								}, new Morris.Area(options);
							case "bar":
								return colors = void 0 === attrs.barColors || "" === attrs.barColors ? null : JSON.parse(attrs.barColors), options = {
									element: ele[0],
									data: data,
									xkey: attrs.xkey,
									ykeys: JSON.parse(attrs.ykeys),
									labels: JSON.parse(attrs.labels),
									barColors: colors || ["#0b62a4", "#7a92a3", "#4da74d", "#afd8f8", "#edc240", "#cb4b4b", "#9440ed"],
									stacked: attrs.stacked || null,
									resize: !0
								}, new Morris.Bar(options);
							case "donut":

								return colors = void 0 === attrs.colors || "" === attrs.colors ? null : JSON.parse(attrs.colors), options = {
									element: ele[0],
									data: data,
									colors: colors || ["#0B62A4", "#3980B5", "#679DC6", "#95BBD7", "#B0CCE1", "#095791", "#095085", "#083E67", "#052C48", "#042135"],
									resize: !0
								}, attrs.formatter && (func = new Function("y", "data", attrs.formatter), options.formatter = func),
									setTimeout(function () {
										new Morris.Donut(options);
									}, 100);
						}
					}
				};
			}]);

}(angular.module("Argus")));

(function (app) {
	app
		.directive("gaugeRegular",
			function () {
				var directive = {};
				directive.restrict = "E";
				directive.templateUrl = "views/otheritems/gaugeTemplate.html";
				directive.scope = {
					position: "=position"
				};
				directive.compile = function (element, attributes) {

					var linkFunction = function ($scope, element, attributes) {
						var pos = (($scope.position) * (90) / 50) - (90);
						$scope.position = 'transform: rotate(' + pos + 'deg);';
					};
					return linkFunction;
				};

				return directive;
			});

}(angular.module("Argus")));

(function (app) {
	app
		.directive("gaugeSmall",
			function () {
				var directive = {};
				directive.restrict = "E";
				directive.templateUrl = "views/otheritems/gaugeSmallTemplate.html";
				directive.scope = {
					position: "=position"
				};
				directive.compile = function (element, attributes) {
					var linkFunction = function ($scope, element, attributes) {
						var pos = (($scope.position) * (90) / 50) - (90);
						$scope.position = 'transform: rotate(' + pos + 'deg);';
					};
					return linkFunction;
				};

				return directive;
			});

}(angular.module("Argus")));

(function (app) {

	app
		.directive("scatterPlot",
			function () {
				var directive = {};
				directive.restrict = "E";
				directive.templateUrl = "views/otheritems/scatterTemplate.html";
				directive.scope = {
					scatterPos: "=scatterPos"
				};

				return directive;
			});

}(angular.module("Argus")));

(function (app) {
	app
		.directive('ngRadialGauge', ['$window', '$timeout',
			function ($window, $timeout) {
				return {
					restrict: 'EAC',
					scope: {
						data: '=',
						lowerLimit: '=',
						upperLimit: '=',
						ranges: '=',
						value: '=',
						valueUnit: '=',
						precision: '=',
						majorGraduationPrecision: '=',
						label: '@',
						onClick: '&'
					},
					link: function (scope, ele, attrs) {
						var defaultUpperLimit = 100;
						var defaultLowerLimit = 0;
						var initialized = false;

						var renderTimeout;
						var gaugeAngle = parseInt(attrs.angle) || 120;
						var width = parseInt(attrs.width) || 300;
						var innerRadius = Math.round((width * 130) / 300);
						var outerRadius = Math.round((width * 145) / 300);
						var majorGraduations = parseInt(attrs.majorGraduations - 1) || 5;
						var minorGraduations = parseInt(attrs.minorGraduations) || 10;
						var majorGraduationLength = Math.round((width * 16) / 300);
						var minorGraduationLength = Math.round((width * 10) / 300);
						var majorGraduationMarginTop = Math.round((width * 7) / 300);
						var majorGraduationColor = attrs.majorGraduationColor || "#B0B0B0";
						var minorGraduationColor = attrs.minorGraduationColor || "#D0D0D0";
						var majorGraduationTextColor = attrs.majorGraduationTextColor || "#6C6C6C";
						var needleColor = attrs.needleColor || "#416094";
						var valueVerticalOffset = Math.round((width * 30) / 300);
						var inactiveColor = "#D7D7D7";
						var transitionMs = parseInt(attrs.transitionMs) || 750;
						var majorGraduationTextSize = parseInt(attrs.majorGraduationTextSize);
						var needleValueTextSize = parseInt(attrs.needleValueTextSize);
						var needle = undefined;

						//The scope.data object might contain the data we need, otherwise we fall back on the scope.xyz property
						var extractData = function (prop) {
							if (!scope.data)
								return scope[prop];
							if (scope.data[prop] === undefined || scope.data[prop] == null) {
								return scope[prop];
							}
							return scope.data[prop];
						};

						var maxLimit;
						var minLimit;
						var value;
						var valueUnit;
						var precision;
						var majorGraduationPrecision;
						var ranges;

						var updateInternalData = function () {
							maxLimit = extractData('upperLimit') ? extractData('upperLimit') : defaultUpperLimit;
							minLimit = extractData('lowerLimit') ? extractData('lowerLimit') : defaultLowerLimit;
							value = extractData('value');
							valueUnit = extractData('valueUnit');
							precision = extractData('precision');
							majorGraduationPrecision = extractData('majorGraduationPrecision');
							ranges = extractData('ranges');
						};
						updateInternalData();

						var svg = d3.select(ele[0])
							.append('svg')
							.attr('width', width)
							.attr('height', width * 0.75);
						var renderMajorGraduations = function (majorGraduationsAngles) {
							var centerX = width / 2;
							var centerY = width / 2;
							//Render Major Graduations
							majorGraduationsAngles.forEach(function (pValue, index) {
								var cos1Adj = Math.round(Math.cos((90 - pValue) * Math.PI / 180) * (innerRadius - majorGraduationMarginTop - majorGraduationLength));
								var sin1Adj = Math.round(Math.sin((90 - pValue) * Math.PI / 180) * (innerRadius - majorGraduationMarginTop - majorGraduationLength));
								var cos2Adj = Math.round(Math.cos((90 - pValue) * Math.PI / 180) * (innerRadius - majorGraduationMarginTop));
								var sin2Adj = Math.round(Math.sin((90 - pValue) * Math.PI / 180) * (innerRadius - majorGraduationMarginTop));
								var x1 = centerX + cos1Adj;
								var y1 = centerY + sin1Adj * -1;
								var x2 = centerX + cos2Adj;
								var y2 = centerY + sin2Adj * -1;
								svg.append("svg:line")
									.attr("x1", x1)
									.attr("y1", y1)
									.attr("x2", x2)
									.attr("y2", y2)
									.style("stroke", majorGraduationColor);

								renderMinorGraduations(majorGraduationsAngles, index);
							});
						};
						var renderMinorGraduations = function (majorGraduationsAngles, indexMajor) {
							var minorGraduationsAngles = [];

							if (indexMajor > 0) {
								var minScale = majorGraduationsAngles[indexMajor - 1];
								var maxScale = majorGraduationsAngles[indexMajor];
								var scaleRange = maxScale - minScale;

								for (var i = 1; i < minorGraduations; i++) {
									var scaleValue = minScale + i * scaleRange / minorGraduations;
									minorGraduationsAngles.push(scaleValue);
								}

								var centerX = width / 2;
								var centerY = width / 2;
								//Render Minor Graduations
								minorGraduationsAngles.forEach(function (pValue, indexMinor) {
									var cos1Adj = Math.round(Math.cos((90 - pValue) * Math.PI / 180) * (innerRadius - majorGraduationMarginTop - minorGraduationLength));
									var sin1Adj = Math.round(Math.sin((90 - pValue) * Math.PI / 180) * (innerRadius - majorGraduationMarginTop - minorGraduationLength));
									var cos2Adj = Math.round(Math.cos((90 - pValue) * Math.PI / 180) * (innerRadius - majorGraduationMarginTop));
									var sin2Adj = Math.round(Math.sin((90 - pValue) * Math.PI / 180) * (innerRadius - majorGraduationMarginTop));
									var x1 = centerX + cos1Adj;
									var y1 = centerY + sin1Adj * -1;
									var x2 = centerX + cos2Adj;
									var y2 = centerY + sin2Adj * -1;
									svg.append("svg:line")
										.attr("x1", x1)
										.attr("y1", y1)
										.attr("x2", x2)
										.attr("y2", y2)
										.style("stroke", minorGraduationColor);
								});
							}
						};
						var getMajorGraduationValues = function (pMinLimit, pMaxLimit, pPrecision) {
							var scaleRange = pMaxLimit - pMinLimit;
							var majorGraduationValues = [];
							for (var i = 0; i <= majorGraduations; i++) {
								var scaleValue = pMinLimit + i * scaleRange / (majorGraduations);
								majorGraduationValues.push(scaleValue.toFixed(pPrecision));
							}

							return majorGraduationValues;
						};
						var getMajorGraduationAngles = function () {
							var scaleRange = 2 * gaugeAngle;
							var minScale = -1 * gaugeAngle;
							var graduationsAngles = [];
							for (var i = 0; i <= majorGraduations; i++) {
								var scaleValue = minScale + i * scaleRange / (majorGraduations);
								graduationsAngles.push(scaleValue);
							}

							return graduationsAngles;
						};
						var getNewAngle = function (pValue) {
							var scale = d3.scale.linear().range([0, 1]).domain([minLimit, maxLimit]);
							var ratio = scale(pValue);
							var scaleRange = 2 * gaugeAngle;
							var minScale = -1 * gaugeAngle;
							var newAngle = minScale + (ratio * scaleRange);
							return newAngle;
						};
						var renderMajorGraduationTexts = function (majorGraduationsAngles, majorGraduationValues, pValueUnit) {
							if (!ranges)
								return;

							var centerX = width / 2;
							var centerY = width / 2;
							var textVerticalPadding = 5;
							var textHorizontalPadding = 5;

							var lastGraduationValue = majorGraduationValues[majorGraduationValues.length - 1];
							var textSize = isNaN(majorGraduationTextSize) ? (width * 12) / 300 : majorGraduationTextSize;
							var fontStyle = textSize + "px Courier";

							var dummyText = svg.append("text")
								.attr("x", centerX)
								.attr("y", centerY)
								.attr("fill", "transparent")
								.attr("text-anchor", "middle")
								.style("font", fontStyle)
								.text(lastGraduationValue + pValueUnit);

							var textWidth = dummyText.node().getBBox().width;

							for (var i = 0; i < majorGraduationsAngles.length; i++) {
								var angle = majorGraduationsAngles[i];
								var cos1Adj = Math.round(Math.cos((90 - angle) * Math.PI / 180) * (innerRadius - majorGraduationMarginTop - majorGraduationLength - textHorizontalPadding));
								var sin1Adj = Math.round(Math.sin((90 - angle) * Math.PI / 180) * (innerRadius - majorGraduationMarginTop - majorGraduationLength - textVerticalPadding));

								var sin1Factor = 1;
								if (sin1Adj < 0)
									sin1Factor = 1.1;
								if (sin1Adj > 0)
									sin1Factor = 0.9;
								if (cos1Adj > 0) {
									if (angle > 0 && angle < 45) {
										cos1Adj -= textWidth / 2;
									} else {
										cos1Adj -= textWidth;
									}
								}
								if (cos1Adj < 0) {
									if (angle < 0 && angle > -45) {
										cos1Adj -= textWidth / 2;
									}
								}
								if (cos1Adj == 0) {
									cos1Adj -= angle == 0 ? textWidth / 4 : textWidth / 2;
								}

								var x1 = centerX + cos1Adj;
								var y1 = centerY + sin1Adj * sin1Factor * -1;

								svg.append("text")
									.attr("class", "mtt-majorGraduationText")
									.style("font", fontStyle)
									.attr("text-align", "center")
									.attr("x", x1)
									.attr("dy", y1)
									.attr("fill", majorGraduationTextColor)
									.text(majorGraduationValues[i] + pValueUnit);
							}
						};
						var renderGraduationNeedle = function (value, valueUnit, precision, minLimit, maxLimit) {
							svg.selectAll('.mtt-graduation-needle').remove();
							svg.selectAll('.mtt-graduationValueText').remove();
							svg.selectAll('.mtt-graduation-needle-center').remove();

							var centerX = width / 2;
							var centerY = width / 2;
							var centerColor;

							if (typeof value === 'undefined') {
								centerColor = inactiveColor;
							} else {
								centerColor = needleColor;
								var needleAngle = getNewAngle(value);
								var needleLen = innerRadius - majorGraduationLength - majorGraduationMarginTop;
								var needleRadius = (width * 2.5) / 300;
								var textSize = isNaN(needleValueTextSize) ? (width * 12) / 300 : needleValueTextSize;
								var fontStyle = textSize + "px Courier";

								if (value >= minLimit && value <= maxLimit) {
									var lineData = [
										[needleRadius, 0],
										[0, -needleLen],
										[-needleRadius, 0],
										[needleRadius, 0]
									];
									var pointerLine = d3.svg.line().interpolate('monotone');
									var pg = svg.append('g').data([lineData])
										.attr('class', 'mtt-graduation-needle')
										.style("fill", needleColor)
										.attr('transform', 'translate(' + centerX + ',' + centerY + ')');
									needle = pg.append('path')
										.attr('d', pointerLine)
										.attr('transform', 'rotate(' + needleAngle + ')');
								}

								svg.append("text")
									.attr("x", centerX)
									.attr("y", centerY + valueVerticalOffset)
									.attr("class", "mtt-graduationValueText")
									.attr("fill", needleColor)
									.attr("text-anchor", "middle")
									.attr("font-weight", "bold")
									.style("font", fontStyle)
									.text('[ ' + value.toFixed(precision) + valueUnit + ' ]');
							}

							var circleRadius = (width * 6) / 300;

							svg.append("circle")
								.attr("r", circleRadius)
								.attr("cy", centerX)
								.attr("cx", centerY)
								.attr("fill", centerColor)
								.attr("class", "mtt-graduation-needle-center");
						};
						$window.onresize = function () {
							scope.$apply();
						};
						scope.$watch(function () {
							return angular.element($window)[0].innerWidth;
						}, function () {
							scope.render();
						});
						scope.$watchCollection('[ranges, data.ranges]', function () {
							scope.render();
						}, true);


						scope.render = function () {
							updateInternalData();
							svg.selectAll('*').remove();
							if (renderTimeout)
								clearTimeout(renderTimeout);

							renderTimeout = $timeout(function () {
								var d3DataSource = [];

								if (typeof ranges === 'undefined') {
									d3DataSource.push([minLimit, maxLimit, inactiveColor]);
								} else {
									//Data Generation
									ranges.forEach(function (pValue, index) {
										d3DataSource.push([pValue.min, pValue.max, pValue.color]);
									});
								}

								//Render Gauge Color Area
								var translate = "translate(" + width / 2 + "," + width / 2 + ")";
								var cScale = d3.scale.linear().domain([minLimit, maxLimit]).range([-1 * gaugeAngle * (Math.PI / 180), gaugeAngle * (Math.PI / 180)]);
								var arc = d3.svg.arc()
									.innerRadius(innerRadius)
									.outerRadius(outerRadius)
									.startAngle(function (d) {
										return cScale(d[0]);
									})
									.endAngle(function (d) {
										return cScale(d[1]);
									});
								svg.selectAll("path")
									.data(d3DataSource)
									.enter()
									.append("path")
									.attr("d", arc)
									.style("fill", function (d) {
										return d[2];
									})
									.attr("transform", translate);

								var majorGraduationsAngles = getMajorGraduationAngles();
								var majorGraduationValues = getMajorGraduationValues(minLimit, maxLimit, majorGraduationPrecision);
								renderMajorGraduations(majorGraduationsAngles);
								renderMajorGraduationTexts(majorGraduationsAngles, majorGraduationValues, valueUnit);
								renderGraduationNeedle(value, valueUnit, precision, minLimit, maxLimit);
								initialized = true;
							}, 200);

						};
						var onValueChanged = function (pValue, pPrecision, pValueUnit) {
							if (typeof pValue === 'undefined' || pValue == null)
								return;

							if (needle && pValue >= minLimit && pValue <= maxLimit) {
								var needleAngle = getNewAngle(pValue);
								needle.transition()
									.duration(transitionMs)
									.ease('elastic')
									.attr('transform', 'rotate(' + needleAngle + ')');
								svg.selectAll('.mtt-graduationValueText')
									.text('[ ' + pValue.toFixed(pPrecision) + pValueUnit + ' ]');
							} else {
								svg.selectAll('.mtt-graduation-needle').remove();
								svg.selectAll('.mtt-graduationValueText').remove();
								svg.selectAll('.mtt-graduation-needle-center').attr("fill", inactiveColor);
							}
						};
						scope.$watchCollection('[value, data.value]', function () {
							if (!initialized)
								return;
							updateInternalData();
							onValueChanged(value, precision, valueUnit);
						}, true);
					}
				};
			}])
		.directive('ngPrint', ['$rootScope',
			function ($rootScope) {
				var printSection = document.getElementById('printSection');
				// if there is no printing section, create one
				if (!printSection) {
					printSection = document.createElement('div');
					printSection.id = 'printSection';
					document.body.appendChild(printSection);
				}
				function link(scope, element, attrs) {
					element.on('click', function () {
						var elemToPrint = document.getElementById(attrs.printElementId);
						if (elemToPrint) {
							printElement(elemToPrint);
						}
					});
					window.onafterprint = function () {
						// clean the print section before adding new content
						printSection.innerHTML = '';
					};
				}
				function printElement(elem) {
					// clones the element you want to print
					var domClone = elem.cloneNode(true);
					printSection.appendChild(domClone);
					$rootScope.$digest();
					window.print();
				}
				return {
					link: link,
					restrict: 'A'
				};
			}]);

}(angular.module("Argus")));

(function (app) {
	app.directive('logout', function () {
		var controller = ['$scope', '$auth', '$rootScope', '$state',
			function ($scope, $auth, $rootScope, $state) {
				$scope.logout = function () {

					$auth.logout().then(function () {
						debugger
						localStorage.removeItem('user');

						$rootScope.authenticated = false;

						$rootScope.currentUser = null;
						$state.go('auth');
					});


				};
			}],
			template = '<a ng-click="logout()">Logout</button>';
		return {
			restrict: 'EA',
			controller: controller,
			template: template,
			transclude: true
		};


	});

}(angular.module('Argus')));

/* global angular, api*/

function formatDate(date) {
	console.log(date);
	return (date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear();
}


/* referrals $resource */
(function (app) {
	'use strict';
	app
		.factory('referrals', ['$resource', '$filter', function ($resource, $filter) {

			var resource = $resource('api/referrals/:id', {}, {
				update: {
					method: 'PUT'
				}
			});

			var utils = {};
			utils.getList = function(){
				return resource.get({list:true}).$promise;
			}
			utils.deleteReferralsFromStudent = function (student) {
				var toRemoveReferralIds = $filter('filter')(student.referred, function (o) {
					return o.remove;
				});

				toRemoveReferralIds = toRemoveReferralIds.map(function (item) {
					return item.Id;
				});
				var urlEncoded = {id: student.Id, student: true};
				var payload = {
					Comment: student.comment || '',
					Date: $scope.currentDate,
					RemoveAll: student.removingAll,
					StudentId: student.Id,
					ToRemoveReferralIds: toRemoveReferralIds
				};
				var request = resource.update(urlEncoded, payload);
				return request.$promise;
			};

			return angular.extend(utils, resource);


		}]);
}(angular.module("Argus")));

/*custom notify */
(function (app) {
	'use strict';
	app
		.factory('MyNotify', ['notify', function (notify) {
			var templateUrl = 'views/common/notify.html';

			var customNotify = function (msg, type) {
				notify.closeAll();
				var classes = 'alert-'.concat(type);

				notify({message: msg, templateUrl: templateUrl, classes: classes});
			};


			return customNotify;
		}]);

}(angular.module("Argus")));


/* referralsAdmin */
(function (app) {
	'use strict';
	app
		.factory('AdminReferralsService', ['$resource', function ($resource) {
			var ref = $resource('api/admin_referrals/:id', {}, {
				update: {
					method: 'PUT'
				}
			});
			return ref;
		}]);

}(angular.module("Argus")));

/* Referrals Service */
(function (app) {
	'use strict';
	app.factory('ReferralsService', ['$resource', '$filter', function ($resource, $filter) {

		var resource = $resource('api/referrals/:id', {}, {
			update: {
				method: 'PUT'
			}
		});

		var utils = {};
		utils.deleteReferralsFromStudent = function (date, student) {
			var toRemoveReferralIds = $filter('filter')(student.referred, function (o) {
				return o.remove;
			});

			toRemoveReferralIds = toRemoveReferralIds.map(function (item) {
				return item.Id;
			});
			var urlEncoded = {id: student.Id, student: true};
			var payload = {
				param: 'ClearStudent',
				Comment: student.comment || '',
				Date: date,
				RemoveAll: student.removingAll,
				StudentId: student.Id,
				ToRemoveReferralIds: toRemoveReferralIds
			};
			var request = resource.update(urlEncoded, payload);
			return request.$promise;
		};

		return angular.extend(utils, resource);


	}]);
}(angular.module('Argus')));

/* Activities Admin */
(function (app) {
	'use strict';
	app
		.factory('AdminActivitiesService', ['$resource', function ($resource) {
			var ref = $resource('api/admin_activities/:id', {}, {
				update: {
					method: 'PUT'
				}
			});
			return ref;
		}]);

}(angular.module("Argus")));

/* Users Admin */
(function (app) {
	'use strict';

	app
		.factory('AdminUsersService', ['$resource', function ($resource) {
			var ref = $resource('api/admin_users/:id', {}, {
				update: {
					method: 'PUT'
				}
			});
			return ref;
		}]);

}(angular.module("Argus")));

/* Users  */
(function (app) {
	'use strict';

	app
		.factory('UsersService', ['$resource', function ($resource) {
			var ref = $resource('api/users/:id', {}, {
				update: {
					method: 'PUT'
				}
			});
			return ref;
		}]);

}(angular.module("Argus")));

/* Roles Admin */
(function (app) {
	'use strict';
	app
		.factory('RolesService', ['$resource', function ($resource) {
			var ref = $resource('api/roles/:id', {}, {
				update: {
					method: 'PUT'
				}
			});
			return ref;
		}]);

}(angular.module("Argus")));

/* schools Admin */
(function (app) {
	'use strict';
	app
		.factory('SchoolsService', ['$resource', function ($resource) {
			var ref = $resource('api/schools/:id', {}, {
				update: {
					method: 'PUT'
				}
			});
			return ref;
		}]);

}(angular.module("Argus")));
/* ClassStudentsService */
(function (app) {
	'use strict';
	app
		.factory('ClassStudentsService', ['$resource', function ($resource) {
			var ref = $resource('api/classstudents/:id', {}, {
				update: {
					method: 'PUT'
				}
			});
			return ref;
		}]);

}(angular.module("Argus")));
/* STUDENTS */
(function (app) {
	'use strict';
	app
		.factory('students', ['$resource', function ($resource) {
			// ngResource call to our static data
			var Students = $resource('api/students/:id', {}, {
				update: {
					method: 'PUT',
					headers: {'UserID': 'Yes'}
				}
			});

			function getStudents(teacherId) {
				return Students.query({teacherId: teacherId}).$promise.then(function (results) {
					return results;
				}, function (error) {
					console.log(error);
				});
			}

			function getAllStudents(success, failure) {
				return Students.query({admin: true}, success, failure);
			}

			function getStudent(param, success, failure) {
				return Students.get(param, success, failure);
			}

			return {
				getStudents: getStudents,
				getAllStudents: getAllStudents,
				getStudent: getStudent
			};

		}]);
}(angular.module("Argus")));

/* Students */
(function (app) {
	'use strict';
	app
		.factory('StudentsService', ['$resource','$filter', function ($resource,$filter) {
			var studentsResource = $resource('api/students/:id', {}, {
				update: {
					method: 'PUT'
				}
			});
			var obj = {};
			obj.students = studentsResource.query({admin: true, light: true});
			obj.refresh = function () {
				obj.students = studentsResource.query({admin: true, light: true});
			};
			obj.addTodaysAct = function(student){
				student.buttons = [];
				student.aec = $filter("filter")(student.referred,function(referral){
					return referral.ReferralTypeId == 12;
				});
				student.orm = $filter("filter")(student.referred,function(referral){
					return referral.ReferralTypeId == 1 || referral.ReferralTypeId == 2 || referral.ReferralTypeId == 3
						|| referral.ReferralTypeId == 16 || referral.ReferralTypeId == 19;
				});
				student.reteach = $filter("filter")(student.referred,function(referral){
					return referral.ReferralTypeId == 18;
				});
				student.ldentention = $filter("filter")(student.referred,function(referral){
					return referral.ReferralTypeId == 9;
				});
				student.iss = $filter("filter")(student.referred,function(referral){
					return referral.ReferralTypeId == 5 || referral.ReferralTypeId == 6 || referral.ReferralTypeId == 7
						|| referral.ReferralTypeId == 10 || referral.ReferralTypeId == 15 || referral.ReferralTypeId == 17;
				});
				student.oss = $filter("filter")(student.referred,function(referral){
					return referral.ReferralTypeId == 11;
				});
				var name = student.user.FirstName;
				if(student.oss.length > 0){
					student.buttons.push({name:"OSS", color:"OSS", description:""})
				}
				if(student.iss.length > 0){
					var reftype = "Referral Type: " + student.iss[0].referral_type.Name;
					var user = "Assigned By: " + student.iss[0].user.FirstName
					student.buttons.push({name:"ISS", color:"ISS", description: reftype + ", " + user })
				}
				if(student.orm.length > 0){
					var reftype = "Referral Type: " + student.orm[0].referral_type.Name;
					var user = "Assigned By: " + (student.orm[0].teacher.Id == 0 ? student.orm[0].user.FirstName :
						student.orm[0].teacher.FirstName + " " + student.orm[0].teacher.LastName);
					student.buttons.push({name:"ORM", color:"O-Room", description: reftype + ", " + user})
				}
				if(student.reteach.length > 0){
					var reftype = "Referral Type: " + student.reteach[0].referral_type.Name;
					var user = "Assigned By: " + student.reteach[0].teacher.FirstName + " " +
						student.reteach[0].teacher.LastName
					student.buttons.push({name:"RET", color:"Re-Teach", description: reftype + ", " + user})
				}
				if(student.aec.length > 0){
					var reftype = "Referral Type: " + student.aec[0].referral_type.Name;
					var num_assignments = "Number of Assignments: " + student.aec.length
					student.buttons.push({name:"AEC", color:"AEC", description: reftype = reftype + ", " + num_assignments})
				}
				if(student.ldentention.length > 0){
					var tardy_period = "Tardy Period: " + student.ldentention[0].period.Number
					student.buttons.push({name:"LDT", color:"Ldetention", description: tardy_period})
				}
			};
			return angular.extend(studentsResource, obj);
		}]);

}(angular.module("Argus")));


/* professor classes */
(function (app) {
	'use strict';
	app
		.factory('ProfessorClassesService', ['$resource', function ($resource) {
			var students = $resource('api/professorclasses/:id', {}, {
				update: {
					method: 'PUT'
				}
			});

			return students;
		}]);

}(angular.module("Argus")));

/* TEACHERS */
(function (app) {
	'use strict';
	app
		.factory('teachers', ['$resource', function ($resource) {
			var teachers = $resource('api/teachers/:id', {}, {
				update: {
					method: 'PUT'
				}
			});

			return teachers;
		}]);
}(angular.module("Argus")));

/* Periods */
(function (app) {
	app
		.factory("PeriodsService", ["$resource", function ($resource) {
			return $resource('api/periods/:id', {}, {
				update: {
					method: 'PUT'
				}
			});

		}]);
}(angular.module("Argus")));

/* Rooms */
(function (app) {
	app
		.factory("RoomsService", ["$resource", function ($resource) {
			return $resource('api/rooms/:id', {}, {
				update: {
					method: 'PUT'
				}
			});
		}]);
}(angular.module("Argus")));


/* O-Room */
(function (app) {
	app
		.factory("OroomService", ["$resource", "ReferralTypesService", "UtilService", "$filter",'notify',
			function ($resource, types, UtilService, $filter,notify) {
				var resource = $resource('api/oroom/:id', {}, {
					update: {
						method: 'PUT'
					}
				});

				resource.getList = function (date, periodIds) {
					var list = resource.get({roster: true, Date: date, 'Periods[]': periodIds}, function (data) {
						resource.count = data.OroomListCount;
						resource.markOverlaps(data.OroomList);
						resource.markActions(data.OroomList);
					});
					return list.$promise;
				};

				resource.markOverlaps = function (students) {
					angular.forEach(students, function (student) {
						var overlap = UtilService.getStudentOverlaps(student);
						student.referred = $filter('filter')(student.referred, function (o) {
							return o.ReferralTypeId === 1 || o.ReferralTypeId === 2
								|| o.ReferralTypeId === 3 || o.ReferralTypeId === 16
								|| o.ReferralTypeId === 19;
						});
						if (overlap.hasoss)
							angular.extend(overlap, {class: 'bg-danger', msg: 'Has OSS'});
						else if (overlap.hasiss) {
							angular.extend(overlap, {class: 'bg-danger', msg: 'Has ISS'});
							if (overlap.isscleared) {
								overlap.msg = 'ISS Cleared';
								overlap.class = '';
							}
						} else if (overlap.hasreteach)
							angular.extend(overlap, {class: 'bg-warning', msg: 'Has Reteach'});
						else if (overlap.hasaec)
							angular.extend(overlap, {class: 'bg-warning', msg: 'Has AEC'});


						if (angular.equals({}, overlap))
							return;

						student.overlap = overlap;
					});
				};

				resource.markOverlapsReport = function (students) {
					angular.forEach(students, function (student) {
						var overlap = UtilService.getStudentOverlaps(student);
						student.referred = $filter('filter')(student.referred, function (o) {
							return o.ReferralTypeId === 1 || o.ReferralTypeId === 2
								|| o.ReferralTypeId === 3 || o.ReferralTypeId === 16
								|| o.ReferralTypeId === 19;
						});
						if (overlap.hasoss)
							angular.extend(overlap, {class: 'bg-gray', msg: 'Has OSS'});
						else if (overlap.hasiss) {
							angular.extend(overlap, {class: 'bg-gray', msg: 'Has ISS'});
							if (overlap.isscleared) {
								overlap.msg = 'ISS Cleared';
								overlap.class = '';
							}
						} else if (overlap.hasreteach)
							angular.extend(overlap, {class: '', msg: 'Has Reteach'});
						else if (overlap.hasaec)
							angular.extend(overlap, {class: '', msg: 'Has AEC'});


						if (angular.equals({}, overlap))
							return;

						student.overlap = overlap;
					});
				};

				resource.markActions = function (students) {
					angular.forEach(students, function (student) {
						// only use the highest priority referral(  [0]  )
						ref = student.referred[0];
						switch (ref.ActivityTypeId) {

							case 24:// Present
								if (ref.RefferalStatus == 1)
									ref.consequence = {referral_type: {Name: 'Completed'}};
								student.status = {class: 'bg-green'};
								break;
							case 88://
								if (ref.RefferalStatus == 1)
									ref.consequence = {referral_type: {Name: 'Cleared'}};
								student.status = {class: 'bg-green'};
								break;
							case 28:// Sent Out
							case 29:// Walked Out
							case 25:// No Show
								student.status = {class: 'bg-danger'};
								delete student.overlap.class;
								break;
							case 26:// Left School
							case 27:// School Absent
							case 30:// Other
								student.status = {class: 'bg-gray'};
								if (ref.RefferalStatus == 1)
									ref.consequence = {referral_type: {Name: 'ORoom → Re-ORoom'}};
								delete student.overlap.class;
								break;
							default:
								console.log('wrong Activity Type');

						}
						;
					});
				};

				resource.markFromStatus = function (students) {

				};

				resource.copyUpdatedResourceAndMarkActions = function (student, data) {
					if (data.referrals && data.referrals.length != 0)
						student.referred = data.referrals;
					else
						student.referred[0] = data.referral;

					resource.markActions([student]);
				};

				resource.updateAttendance = function (date, student) {
					$toRemoveReferralIds = $filter('filter')(student.referred, function (o) {
						return o.remove;
					});

					$toRemoveReferralIds = $toRemoveReferralIds.map(function (item) {
						return item.Id;
					});
					var urlEncoded = {id: student.referred[0].Id, attendance: true};
					var payload = {
						ActionType: student.ActivityTypeId,
						Comment: student.comment || '',
						Date: date,
						MoveClearToDate: student.moveDate,
						RemoveAll: student.removingAll,
						StudentId: student.Id,
						ToRemoveReferralIds: $toRemoveReferralIds

					};
					var request = resource.update(urlEncoded, payload, function (data) {
						resource.copyUpdatedResourceAndMarkActions(student, data);
						resource.count--;
					}, function(data){
						if(data.status = 409) {// conflict.. referral already taken
							resource.copyUpdatedResourceAndMarkActions(student, data);
							resource.count--;
						}else{
							notify('error, Before continuing please contact the system admin');
						}
					});

					return request.$promise;
				};

				resource.count = 0;

				resource.getCount =  function(){
					resource.get({count: true, roster: true},function(data){
						resource.count  = data.OroomList;
					});

				};

				return resource;
			}]);
}(angular.module("Argus")));

/* Lunch */
(function (app) {
	app
		.factory("LunchService", ["$resource", "UtilService", '$filter',
			function ($resource, UtilService, $filter) {
				var resource = $resource('api/lunch/:id', {}, {
					update: {
						method: 'PUT'
					}
				});


				resource.markOverlaps = function (students) {
					angular.forEach(students, function (student) {
						var overlap = UtilService.getStudentOverlaps(student);
						student.referred = $filter('filter')(student.referred, function (o) {
							return o.ReferralTypeId === 9;
						});
						if (overlap.hasoss)
							angular.extend(overlap, {class: 'bg-danger', msg: 'Has OSS'});
						else if (overlap.hasiss) {
							angular.extend(overlap, {class: 'bg-danger', msg: 'Has ISS'});
							if (overlap.isscleared) {
								overlap.msg = 'ISS Cleared';
								overlap.class = '';
							}
						}

						student.overlap = overlap;
					});
				};

				resource.markOverlapsReport = function (students) {
					angular.forEach(students, function (student) {
						var overlap = UtilService.getStudentOverlaps(student);
						student.referred = $filter('filter')(student.referred, function (o) {
							return o.ReferralTypeId === 9
						});
						if (overlap.hasoss)
							angular.extend(overlap, {class: 'bg-gray', msg: 'Has OSS'});
						else if (overlap.hasiss)
							angular.extend(overlap, {class: 'bg-gray', msg: 'Has ISS'});


						if (angular.equals({}, overlap))
							return;

						student.overlap = overlap;
					});
				};

				resource.markActions = function (students) {
					angular.forEach(students, function (student) {
						// only use the highest priority referral(  [0]  )
						switch (student.referred[0].ActivityTypeId) {
							case 0 :
								console.log('N/A');
								break;
							case 31:// Present
								student.status = {class: 'bg-green'};
								break;
							case 35:// Sent Out
							case 36:// Walked Out
							case 32:// No Show
								student.status = {class: 'bg-danger'};
								break;
							case 33:// Left School
							case 34:// School Absent
							case 37:// Other
								student.status = {class: 'bg-gray'};
								break;
							default:
								console.log('wrong Activity Type');

						}
						;
					});
				};

				resource.copyUpdatedResourceAndMarkActions = function (student, data) {
					angular.extend(student.referred[0], data.referral);
					resource.markActions([student]);
				};

				resource.separateLists = function (students) {

				};


				resource.updateAttendance = function (date, student) {
					var urlEncoded = {id: student.referred[0].Id};
					var payload = {
						ActionType: student.ActivityTypeId,
						Comment: student.comment,
						StudentId: student.Id,
						Date: date
					};
					return resource.update(urlEncoded, payload, function (data) {
						resource.copyUpdatedResourceAndMarkActions(student, data);
						resource.count--;
					}).$promise;


				};

				resource.getList = function (date) {
					var list = resource.get({Date: date}, function (data) {
						resource.count = data.lunchStudentsCount;
						resource.markOverlaps(data.lunchStudents);
						resource.markActions(data.lunchStudents);
					});
					return list.$promise;
				};

				resource.count = 0;

				resource.getCount =  function(){
					resource.get({count: true, roster: true},function(data){
						resource.count  = data.lunchStudentsCount;
					});

				};

				resource.saveReferral = function (date, student) {
					var urlEncoded = {};
					var payload = {
						StudentId: student.Id,
						PeriodId: student.period ? student.period.Id : 0,
						TardyTime: student.tardyTime,
						Date: date
					};
					return resource.save(urlEncoded, payload,function(){resource.count++;}).$promise;
				};


				return resource;

			}]);

}(angular.module("Argus")));

/* ISS */
(function (app) {
	app
		.factory("ISSService", ["$resource", "UtilService", '$filter',
			function ($resource, UtilService, $filter) {
				var resource = $resource('api/iss/:id', {}, {
					update: {
						method: 'PUT'
					}
				});

				var utils = {};

				utils.copyUpdatedResourceAndMarkActions = function (student, data) {
					student.referred = data.referrals;
					utils.markActions([student]);
				};

				utils.updateAttendance = function (date, student) {
					$toRemoveReferralIds = $filter('filter')(student.referred, function (o) {
						return o.remove;
					});

					$toRemoveReferralIds = $toRemoveReferralIds.map(function (item) {
						return item.Id;
					});

					var urlEncoded = {id: student.referred[0].Id};
					var payload = {
						ActionType: student.ActivityTypeId,
						Comment: student.comment || '',
						Date: date,
						MoveClearToDate: student.moveDate,
						RemoveAll: student.removingAll,
						StudentId: student.Id,
						ToRemoveReferralIds: $toRemoveReferralIds
					};

					var request = resource.update(urlEncoded, payload, function (data) {
						utils.copyUpdatedResourceAndMarkActions(student, data);
					});
					return request.$promise;
				};

				utils.semiUpdateAttendance = function (date, student) { // support staff

				};

				utils.markOverlaps = function (students) {

					angular.forEach(students, function (student) {
						var overlap = UtilService.getStudentOverlaps(student);
						student.referred = $filter('filter')(student.referred, function (o) {
							return o.ReferralTypeId === 5 || o.ReferralTypeId === 6
								|| o.ReferralTypeId === 7 || o.ReferralTypeId === 10
								|| o.ReferralTypeId === 17
								;
						});
						if (overlap.hasoss)
							angular.extend(overlap, {class: 'bg-danger', msg: 'Has OSS'});
						else if (overlap.hasorm)
							angular.extend(overlap, {class: 'bg-danger', msg: 'Has ORM'});
						else if (overlap.hasreteach)
							angular.extend(overlap, {class: 'bg-warning', msg: 'Has Reteach'});
						else if (overlap.hasaec)
							angular.extend(overlap, {class: 'bg-warning', msg: 'Has AEC'});


						if (angular.equals({}, overlap))
							return;

						student.overlap = overlap;


					});
				};

				utils.markOverlapsReport = function (students) {
					angular.forEach(students, function (student) {
						var overlap = UtilService.getStudentOverlaps(student);
						student.referred = $filter('filter')(student.referred, function (o) {
							return o.ReferralTypeId === 5 || o.ReferralTypeId === 6
								|| o.ReferralTypeId === 7 || o.ReferralTypeId === 10
								|| o.ReferralTypeId === 11 || o.ReferralTypeId === 15
								|| o.ReferralTypeId === 17
								;
						});
						if (overlap.hasoss)
							angular.extend(overlap, {class: 'bg-gray', msg: 'Has OSS'});
						else if (overlap.hasiss)
							angular.extend(overlap, {class: '', msg: 'Has ISS'});
						else if (overlap.hasreteach)
							angular.extend(overlap, {class: '', msg: 'Has Reteach'});
						else if (overlap.hasaec)
							angular.extend(overlap, {class: '', msg: 'Has has AEC'});


						if (angular.equals({}, overlap))
							return;

						student.overlap = overlap;
					});
				};

				utils.markActions = function (students) {
					angular.forEach(students, function (student) {
						// only use the highest priority referral(  [0]
						switch (student.referred[0].ActivityTypeId) {
							case 0 :
								console.log('N/A');
								break;
							case 38:// Present
								if (student.referred[0].RefferalStatus == 1)
									student.referred[0].consequence = {referral_type: {Name: 'Present'}};
								student.status = {class: 'bg-green'};
								break;
							case 87:// clear
								if (student.referred[0].RefferalStatus == 1)
									student.referred[0].consequence = {referral_type: {Name: 'Cleared'}};
								student.status = {class: 'bg-green'};
								break;
							case 42:// Sent Out
							case 43:// Walked Out
							case 39:// No Show
								student.status = {class: 'bg-danger'};
								delete student.overlap.class;
								break;
							case 40:// Left School
							case 41:// School Absent
							case 47:// Other
							case 91:// Other
							case 86:// reassign
								student.status = {class: 'bg-gray'};
								if (student.referred[0].RefferalStatus == 1)
									student.referred[0].consequence = {referral_type: {Name: 'ISS → Re-ISS'}};
								delete student.overlap.class;
								break;
							default:
								console.log('wrong Activity Type');

						}
						;
					});
				};

				utils.getList = function (date, callback) {
					var list = resource.query({roster: true, Date: date}, function (data) {
						callback && callback(data);
						utils.markOverlaps(data);
						utils.markActions(data);
					});

					return list;
				};

				return angular.extend(resource, utils);
			}]);
}(angular.module("Argus")));


/* ISS Followup Service */
(function (app) {
	app.factory('ISSFollowupService', ['$resource', 'UtilService', '$filter',
		function ($resource, UtilService, $filter) {
			var resource = $resource('api/issfollowup/:id', {}, {
				update: {method: 'PUT'}
			});
			var utils = {};
			utils.getList = function () {
				return resource.query({roster: true}, function (data) {

				});
			};

			utils.updateAttendance = function (student, date) {
				var urlEncoded = {id: student.Id};
				var payload = {Comment: student.comment || '', StudentId: student.StudentId};
				switch (student.ActivityTypeId) {
					case 1:
						payload.param = 'reassign';
						break;
					case 2:
						payload.param = 'oss';
						payload.DateOfSuspensionStart = student.dateOfSuspensionStart;
						payload.DateOfSuspensionEnd = student.dateOfSuspensionEnd;
						payload.MeetingDate = student.meetingDate;
						payload.MeetingTime = student.meetingTime;
						payload.MeetingWithId = student.teacher.id;
						break;
					case 3:
						payload.param = 'clear';
						break;
				}
				return resource.update(urlEncoded, payload).$promise;
			}

			return angular.extend(utils, resource);

		}]);
}(angular.module('Argus')));

/* OSS */
(function (app) {
	app
		.factory("OSSService", ["$resource", "UtilService", '$filter', function ($resource, UtilService, $filter) {
			var resource = $resource('api/oss/:id', {}, {
				update: {
					method: 'PUT'
				}
			});

			var utils = {};

			utils.markOverlaps = function (students) {
				angular.forEach(students, function (student) {
					var overlap = UtilService.getStudentOverlaps(student);

					if (overlap.hasiss)
						angular.extend(overlap, {class: 'bg-danger', msg: 'Has ISS'});
					else if (overlap.hasorm)
						angular.extend(overlap, {class: 'bg-danger', msg: 'Has ORM'});
					else if (overlap.aec)
						angular.extend(overlap, {class: 'bg-warning', msg: 'Has AEC'});

					if (angular.equals({}, overlap))
						return;

					student.overlap = overlap;

				})
			}

			utils.markOverlapsReport = function (students) {
				angular.forEach(students, function (student) {
					var overlap = UtilService.getStudentOverlaps(student);

					if (overlap.hasiss)
						angular.extend(overlap, {class: '', msg: 'Has ISS'});
					else if (overlap.hasorm)
						angular.extend(overlap, {class: '', msg: 'Has ORM'});
					else if (overlap.aec)
						angular.extend(overlap, {class: '', msg: 'Has AEC'});

					if (angular.equals({}, overlap))
						return;

					student.overlap = overlap;

				})
			}

			utils.getParentMeetingList = function () {
				return resource.query({param: 'parentMeetingList'}, function (data) {
					angular.forEach(data, function (ref) {
						debugger;
						if (ref.Date.split(' ')[0] == ref.DateEnd)
							ref.DateEnd = null;

					})
				});
			};

			utils.updateParentMeetingInformation = function (referral) {
				var urlEncoded = {id: referral.Id};
				var payload = {};
				payload.PMPInfo = true;
				payload.DateOfSuspension = referral.dateOfSuspension;
				payload.MeetingDate = referral.meetingDate;
				payload.MeetingTime = referral.meetingTime;
				payload.MeetingWithId = referral.teacher.id;
				return resource.update(urlEncoded, payload, function (data) {
					debugger;
					angular.extend(referral, data.referral);
				}).$promise;
			};

			utils.updateParentMeetingAttendance = function (referral) {
				var urlEncoded = {id: referral.Id};
				var payload = {
					StudentId: referral.student_user.id,
					Comment: referral.comment
				};
				switch (referral.ActivityTypeId) {
					case 1:
						$toRemoveReferralIds = $filter('filter')(referral.student_user.student.referred, function (o) {
							return o.remove;
						});

						$toRemoveReferralIds = $toRemoveReferralIds.map(function (item) {
							return item.Id;
						});
						angular.extend(payload, {
							attendance: true,
							ToRemoveReferralIds: $toRemoveReferralIds
						});

						break;
					case 2:
						angular.extend(payload, {noshow: true})
						break;
					case 3:
						angular.extend(payload, {
							DateOfSuspension: student.dateOfSuspension,
							MeetingDate: student.meetingDate,
							MeetingTime: student.meetingTime,
							MeetingWithId: student.teacher.id

						})
						break;
				}
				return resource.update(urlEncoded, payload).$promise;
			};

			utils.getOSSList = function (date, callback) {
				return resource.query({param: 'ossList', Date: date}, callback);
			}

			return angular.extend(resource, utils);

		}]);
}(angular.module("Argus")));

/* OSS Followup */
(function (app) {
	app
		.factory("OSSFollowupService", ["$resource", "UtilService", '$filter', function ($resource, UtilService, $filter) {
			var resource = $resource('api/ossfollowup/:id', {}, {
				update: {
					method: 'PUT'
				}
			});
			var utils = {};
			utils.getList = function (date) {
				return resource.query({roster: true});
			};
			utils.updateParentMeetingInformation = function (referral) {
				var urlEncoded = {id: referral.Id};
				var payload = {};
				payload.PMPInfo = true;
				payload.DateOfSuspension = referral.dateOfSuspension;
				payload.MeetingDate = referral.meetingDate;
				payload.MeetingTime = referral.meetingTime;
				payload.MeetingWithId = referral.teacher.id;
				return resource.update(urlEncoded, payload, function (data) {
					debugger;
					angular.extend(referral, data.referral);
				}).$promise;
			};

			return angular.extend(resource, utils);
		}]);
}(angular.module("Argus")));

/* ASP */
(function (app) {
	app
		.factory("ASPService", ["$resource", 'UtilService', '$filter', function ($resource, UtilService, $filter) {
			var resource = $resource('api/asp/:id', {}, {
				update: {
					method: 'PUT'
				}
			});

			var utils = {};

			utils.markOverlaps = function (students) {
				angular.forEach(students, function (student) {
					var overlap = UtilService.getStudentOverlaps(student);

					if (overlap.hasoss)
						angular.extend(overlap, {class: 'bg-danger', msg: 'Has OSS'});
					else if (overlap.hasiss)
						angular.extend(overlap, {class: 'bg-danger', msg: 'Has ISS'});
					else if (overlap.hasorm)
						angular.extend(overlap, {class: 'bg-danger', msg: 'Has ORM'});
					else if (overlap.aec)
						angular.extend(overlap, {class: 'bg-warning', msg: 'Has AEC'});

					if (angular.equals({}, overlap))
						return;

					student.overlap = overlap;

				})
			}

			return angular.extend(resource, utils);
		}]);
}(angular.module("Argus")));

/* AEC List */
(function (app) {
	app.factory("AECListService", ["$http", '$resource', 'ReferralTypesService', '$filter', 'UtilService',
		function ($http, $resource, types, $filter, UtilService) {

			var resource = $resource('api/aeclist/:id', {}, {
				update: {
					method: 'PUT'
				}
			});
			var utils = {};

			utils.markOverlaps = function (data, schoolId) {

				angular.forEach(data, function (student) {
					var overlap = UtilService.getStudentOverlaps(student);
					//  get rid of other referrals and only leave AEC
					student.referred = $filter('filter')(student.referred, function (o) {
						return o.ReferralTypeId === 12;
					});
					if (overlap.hasoss)
						angular.extend(overlap, {class: 'bg-danger', msg: 'Has OSS'});
					else if (overlap.hasiss) {
						angular.extend(overlap, {class: 'bg-danger', msg: 'Has ISS'});
						if (overlap.isscleared) overlap.msg = 'ISS Cleared';
					} else if (overlap.hasorm) {
						angular.extend(overlap, {class: 'bg-danger', msg: 'Has ORM'});
						if (overlap.ormcleared) overlap.msg = 'ORM Cleared';
					} else if (overlap.hasreteach)
						angular.extend(overlap, {class: 'bg-warning', msg: 'Has Reteach'});


					if (angular.equals({}, overlap))
						return;

					student.overlap = overlap;
				});
			};

			utils.markOverlapsReport = function (data, schoolId) {

				angular.forEach(data, function (student) {
					var overlap = UtilService.getStudentOverlaps(student);
					//  get rid of other referrals and only leave AEC
					student.referred = $filter('filter')(student.referred, function (o) {
						return o.ReferralTypeId === 12;
					});
					if (overlap.hasoss)
						angular.extend(overlap, {class: 'bg-gray', msg: 'Has OSS'});
					else if (overlap.hasiss)
						angular.extend(overlap, {class: 'bg-gray', msg: 'Has ISS'});
					else if (overlap.hasorm)
						angular.extend(overlap, {class: 'bg-gray', msg: 'Has ORM'});
					else if (overlap.hasreteach)
						angular.extend(overlap, {class: 'bg-gray', msg: 'Has Reteach'});


					if (angular.equals({}, overlap))
						return;

					student.overlap = overlap;
				});
			};

			utils.markActions = function (data) {
				angular.forEach(data, function (student) {

					var assignments = {completed: [], incompleted: []};
					student.activity = student.referred[0].activity || {};
					student.ActivityTypeId = student.referred[0].ActivityTypeId;
					var onlyAEC = $filter('filter')(student.referred, function (o) {
						return o.ReferralTypeId === 12;
					})
					student.referred = onlyAEC;
					angular.forEach(onlyAEC, function (ref) {
						ref.HasFolder = (ref.HasFolder === 1 || ref.hasFolder ) ? true : false;
						if (ref.ActivityTypeId === 49) {// present, check what assignments were completed
							ref.AssignmentCompleted = (ref.AssignmentCompleted === 1 || ref.AssignmentCompleted) ? true : false;
							if (ref.AssignmentCompleted)
								assignments.completed.push(ref);
							else
								assignments.incompleted.push(ref);

							student.activity.Name = 'Present: ';
						}
					});
					switch (student.ActivityTypeId) {
						case 49:// present

							if (assignments.incompleted.length === 0) {
								student.status = {class: 'bg-green'};
								student.activity.Name += 'complete'
							} else {
								student.status = {class: 'bg-green'};
								student.activity.Name += 'incomplete';
							}
							if (student.referred[0].RefferalStatus == 2)
								student.referred[0].consequence = {referral_type: {Name: 'Completed'}};
							break;
						case 55: // sent out
						case 56: // walked out
						case 52: // no show
							student.status = {class: 'bg-danger'};
							break;

						case 51: // cleared
							student.status = {class: 'bg-green'};
							if (student.referred[0].RefferalStatus == 2)
								student.referred[0].consequence = {referral_type: {Name: 'Cleared'}};
							break;
						case 53:// Left School
						case 54:// School Absent
						case 57:// Other
						case 50: // rescheduled
							student.status = {class: 'bg-gray'};
							if (student.referred[0].RefferalStatus == 2)
								student.referred[0].consequence = {referral_type: {Name: 'AEC → Re-AEC'}};
							break;
					}
					if (student.referred[0].RefferalStatus == 4) {
						student.status = {class: 'bg-warning'};
					}
				});
			};

			utils.markFromStatus = function (data) {
				angular.forEach(data, function (student) {
					angular.forEach(student.referred, function (ref) {
						switch (ref.RefferalStatus) {
							case 0://

								break;
							case 1:
								break;
							case 2:
								break;
							case 3:
								break;
							case 4:
								student.activity.Name = "Pending Followup";
								break;
						}
					});
				});
			};

			utils.copyUpdatedResourceAndMarkActions = function (student, data) {
				if (data.wasClear) {
					student.referred = data.referrals;
				} else {
					angular.forEach(data.referrals, function (ref, $index) {
						angular.extend(student.referred[$index], ref);
					});
				}
				utils.markActions([student]);

			};

			utils.updateAttendance = function (currentDate, student) {

				if (student.ActivityTypeId == 50)
					return utils.updateAttendanceReschedule(currentDate, student);
				else if (student.ActivityTypeId == 51)
					return utils.updateAttendanceClear(currentDate, student);

				// sent when present
				var referrals = student.referred.map(function (o) {
					return {Id: o.Id, AssignmentCompleted: o.AssignmentCompleted};
				});
				// sent otherwise
				var referralIds = student.referred.map(function (o) {
					return o.Id;
				});
				var urlEncoded = {id: student.Id};
				var payload = {
					param: 'attendance',
					ActionType: student.ActivityTypeId,
					Comment: student.comment,
					Date: currentDate,
					Referrals: student.ActivityTypeId == 49 ? referrals : referralIds
				};

				return resource.update(urlEncoded, payload, function (data) {
					utils.copyUpdatedResourceAndMarkActions(student, data);
				}).$promise;

			};

			utils.updateAttendanceReschedule = function (date, student) {
				debugger;

				var referrals = student.referred.map(function (o) {
					return o.Id;
				});
				var urlEncoded = {id: student.Id};
				var payload = {
					param: 'reschedule',
					Comment: student.comment,
					newDate: student.rescheduleDate,
					Date: date,
					ReferralIds: referrals,
					excused: student.excused
				};

				return resource.update(urlEncoded, payload, function (data) {
					utils.copyUpdatedResourceAndMarkActions(student, data);
				}).$promise;
			};

			utils.updateAttendanceClear = function (date, student) {
				$toRemoveReferralIds = $filter('filter')(student.referred, function (o) {
					return o.remove;
				});

				$toRemoveReferralIds = $toRemoveReferralIds.map(function (item) {
					return item.Id;
				});
				var urlEncoded = {id: student.referred[0].Id, attendance: true};
				var payload = {
					param: 'clear',
					ActionType: student.ActivityTypeId,
					Comment: student.comment || '',
					Date: date,
					MoveClearToDate: student.moveDate,
					RemoveAll: student.removingAll,
					StudentId: student.Id,
					ToRemoveReferralIds: $toRemoveReferralIds

				};
				debugger;
				var request = resource.update(urlEncoded, payload, function (data) {
					utils.copyUpdatedResourceAndMarkActions(student, data);
				});

				return request.$promise;

			};

			// data = { comment, date, excused, student}
			utils.updateReschedule = function (currentDate, data) {
				var student = data.student;

				var referrals = student.referred.map(function (o) {
					return o.Id;
				});
				var urlEncoded = {id: student.Id};
				var payload = {
					param: 'reschedule',
					Comment: data.comment,
					newDate: data.date,
					Date: currentDate,
					ReferralIds: referrals,
					excused: data.excused
				};

				return resource.update(urlEncoded, payload, function (data) {
					utils.copyUpdatedResourceAndMarkActions(student, data);
				}).$promise;
			};

			utils.updateClear = function (currentDate, student, comment) {
				var referralsIds = student.referred.map(function (o) {
					return o.Id;
				});
				var urlEncoded = {id: student.Id};
				var payload = {
					param: 'clear',
					Date: currentDate,
					Comment: comment,
					ReferralIds: referralsIds
				};
				return resource.update(urlEncoded, payload, function (data) {
					utils.copyUpdatedResourceAndMarkActions(student, data);
				}).$promise;
			};

			utils.submitList = function (students, date) {
				var promises = [];
				/*var overlaps = $filter('filter')(students, function (o) {
				 o = o.overlap;
				 return o.hasoss || o.hasiss || o.hasorm || o.hasreteach;
				 });
				 var overlapIds = overlaps.map(function (o) {
				 return o.Id;
				 });*/
				var payload = {
					param: 'commitAEC',
					Date: date,
				};


				return resource.update({id: 1}, payload, function (data) {
					angular.forEach(students, function (student) {
						if (student.ActivityTypeId !== 0) {//|| overlapIds.indexOf(student.Id) !== -1 )
							student.referred[0].referralStatus = 2;
							return;
						}
						student.activity.Name = "Pending Followup";
						student.referred[0].RefferalStatus = 4;
					});
				}).$promise;

			};

			utils.updateOverlapAttendance = function (date, student) {
				var referrals = student.referred.map(function (o) {
					return {Id: o.Id, HasFolder: o.HasFolder || false};
				});

				var payload = {
					param: 'attendance',
					param2: 'hasFolders',
					ActionType: student.ActionTypeId,
					Comment: student.comment,
					Date: date,
					Referrals: referrals
				};
				var urlEncoded = {id: student.Id};
				return resource.update(urlEncoded, payload, function (data) {
					utils.copyUpdatedResourceAndMarkActions(student, data);
				}).$promise;
			};

			utils.getList = function (date, callback) {
				var list = resource.query({Date: date}, function (data) {
					callback && callback(data);
					utils.markOverlaps(data);
					utils.markActions(data);
					utils.markFromStatus(data);
				});
				return list;
			};

			return angular.extend(resource, utils);


		}]);
}(angular.module("Argus")));

/* Reteach List */
(function (app) {
	app.factory("ReteachListService", ['$resource', 'UtilService', '$filter', function ($resource, UtilService, $filter) {
		var resource = $resource('api/reteachlist/:id', {}, {
			update: {
				method: 'PUT'
			}
		});

		var utils = {};

		utils.copyUpdatedResourceAndMarkActions = function (student, data) {
			angular.forEach(data.referrals, function (ref, $index) {
				angular.extend(student.referred[$index], ref);
			});
			utils.markActions([student]);

		};

		utils.markOverlaps = function (students, schoolId) {
			angular.forEach(students, function (student) {
				var overlap = UtilService.getStudentOverlaps(student);
				//  get rid of other referrals and only leave reteach
				//debugger;
				student.referred = $filter('filter')(student.referred, function (o) {
					return o.ReferralTypeId === 18;
				});

				if (overlap.hasoss)
					angular.extend(overlap, {class: 'bg-danger', msg: 'Has OSS'});
				else if (overlap.hasiss) {
					angular.extend(overlap, {class: 'bg-danger', msg: 'Has ISS'});
					if (overlap.isscleared) overlap.msg = 'ISS Cleared';
				} else if (overlap.hasorm) {
					angular.extend(overlap, {class: 'bg-danger', msg: 'Has ORM'});
					if (overlap.ormcleared) overlap.msg = 'ORM Cleared';
				} else if (overlap.hasaec)
					angular.extend(overlap, {class: 'bg-warning', msg: 'Has AEC'});


				if (angular.equals({}, overlap))
					return;

				student.overlap = overlap;
			})
		};

		utils.markOverlapsReport = function (students, schoolId) {
			angular.forEach(students, function (student) {
				var overlap = UtilService.getStudentOverlaps(student);
				//  get rid of other referrals and only leave reteach
				//debugger;
				student.referred = $filter('filter')(student.referred, function (o) {
					return o.ReferralTypeId === 18;
				});

				if (overlap.hasoss)
					angular.extend(overlap, {class: 'bg-gray', msg: 'Has OSS'});
				else if (overlap.hasiss)
					angular.extend(overlap, {class: 'bg-gray', msg: 'Has ISS'});
				else if (overlap.hasorm)
					angular.extend(overlap, {class: 'bg-gray', msg: 'Has ORM'});
				else if (overlap.hasaec)
					angular.extend(overlap, {class: '', msg: 'Has AEC'});


				if (angular.equals({}, overlap))
					return;

				student.overlap = overlap;
			})
		};

		utils.markActions = function (students) {
			//debugger;
			angular.forEach(students, function (student) {
				student.activity = student.referred[0].activity || {};
				student.ActivityTypeId = student.referred[0].ActivityTypeId;
				switch (student.ActivityTypeId) {
					case 75: // sent out
					case 70: // walked out
					case 67: // no show
						student.status = {class: 'bg-danger'};
						break;

					case 66: // cleared
					case 64:// present
						student.status = {class: 'bg-green'};
						if (student.referred[0].RefferalStatus == 2)
							student.referred[0].consequence = {referral_type: {Name: 'Completed'}};
						break;
					case 68:// Left School
					case 69:// School Absent
					case 71:// Other
					case 65: // rescheduled
						student.status = {class: 'bg-gray'};
						if (student.referred[0].RefferalStatus == 2)
							student.referred[0].consequence = {referral_type: {Name: 'Reteach → Re-Reteach'}};
						break;
				}
				if (student.referred[0].RefferalStatus == 8) {
					student.status = {class: 'bg-warning'};
				}
			});
		};

		utils.markFromStatus = function (data) {
			angular.forEach(data, function (student) {
				angular.forEach(student.referred, function (ref) {
					switch (ref.RefferalStatus) {
						case 0://

							break;
						case 1:
							break;
						case 2:
							break;
						case 3:
							break;
						case 8:
							student.activity.Name = "Pending Followup";
							break;
					}
				});
			});
		};

		utils.updateAttendance = function (date, student) {


			// sent when present
			var referrals = student.referred.map(function (o) {
				return {Id: o.Id, AssignmentCompleted: o.AssignmentCompleted};
			});
			// sent otherwise
			var referralIds = student.referred.map(function (o) {
				return o.Id;
			});

			var urlEncoded = {id: student.Id};
			var payload = {
				param: 'attendance',
				ActionType: student.ActivityTypeId,
				Comment: student.comment,
				Date: date,
				Referrals: student.ActivityTypeId == 64 ? referrals : referralIds
			};

			return resource.update(urlEncoded, payload, function (data) {
				utils.copyUpdatedResourceAndMarkActions(student, data);
			}).$promise;

		};


		utils.updateReschedule = function (date, student) {

		};

		utils.updateClear = function (date, student) {

		};

		utils.submitList = function (students, date) {
			var payload = {
				param: 'commitReteach',
				Date: date,
			};


			return resource.update({id: 1}, payload, function (data) {
				angular.forEach(students, function (student) {
					if (student.ActivityTypeId !== 0) {//|| overlapIds.indexOf(student.Id) !== -1 )
						student.referred[0].referralStatus = 2;
						return;
					}
					student.activity.Name = "Pending Followup";
					student.referred[0].RefferalStatus = 8;
				});
			}).$promise;

		};

		utils.getList = function (date, callback) {
			var list = resource.query({Date: date}, function (data) {
				callback && callback(data);
				utils.markOverlaps(data);
				utils.markActions(data);
				utils.markFromStatus(data);
			});
			return list;
		};

		return angular.extend(resource, utils);
	}]);
}(angular.module("Argus")));

/* AEC Absence */
(function (app) {

	app.factory("AECAbsenceListService", ["$http", '$resource', 'UtilService', '$filter',
		function ($http, $resource, UtilService, $filter) {
			var resource = $resource('api/aecabsencelist/:id', {}, {
				update: {
					method: 'PUT'
				}
			});

			var utils = {};

			utils.getList = function (date, callback) {
				var list = resource.query({Date: date}, utils.markOverlaps);
				return list;
			};

			utils.markOverlaps = function (data, schoolId) {

				angular.forEach(data, function (student) {
					var overlap = UtilService.getStudentOverlaps(student);
					//  get rid of other referrals and only leave AEC
					student.referred = $filter('filter')(student.referred, function (o) {
						return o.ReferralTypeId === 12;
					});
					if (overlap.hasoss)
						angular.extend(overlap, {class: 'bg-danger', msg: 'Had OSS'});
					else if (overlap.hasiss)
						angular.extend(overlap, {class: 'bg-danger', msg: 'Had ISS'});
					else if (overlap.hasreteach)
						angular.extend(overlap, {class: 'bg-warning', msg: 'Had Reteach'});
					else if (overlap.hasorm)
						angular.extend(overlap, {class: 'bg-danger', msg: 'Had ORM'});


					if (angular.equals({}, overlap))
						return;

					student.overlap = overlap;
				});
			};

			utils.updateAttendance = function (date, student) {
				//  One Request
				var referralIds = student.referred.map(function (o) {
					return o.Id;
				});
				var referred = student.referred.map(function (o) {
					return {Id: o.Id, HasFolder: o.HasFolder, assignment: o.assignment};
				});
				var urlEncoded = {id: student.id};
				var payload = {
					ActionType: student.radioModel,
					Comment: student.comment,
					Date: date,
					referrals: referralIds,
					referred: referred
				};
				return resource.update(urlEncoded, payload).$promise;

			};


			return angular.extend(resource, utils);

		}]);
}(angular.module("Argus")));

/* Reteach Absence List */
(function (app) {

	app.factory("ReteachAbsenceListService", ['$resource', 'UtilService', '$filter',
		function ($resource, UtilService, $filter) {
			var resource = $resource('api/reteachaecabsencelist/:id', {}, {
				update: {
					method: 'PUT'
				}
			});


			var utils = {};


			utils.getList = function (date, callback) {
				var list = resource.query({Date: date});
				return list;
			};

			utils.markOverlaps = function (data, schoolId) {
				angular.forEach(data, function (student) {
					var overlap = UtilService.getStudentOverlaps(student);
					//  get rid of other referrals and only leave AEC
					student.referred = $filter('filter')(student.referred, function (o) {
						return o.ReferralTypeId === 18;
					});
					if (overlap.hasoss)
						angular.extend(overlap, {class: 'bg-danger', msg: 'Had OSS'});
					else if (overlap.hasiss)
						angular.extend(overlap, {class: 'bg-danger', msg: 'Had ISS'});
					else if (overlap.hasaec)
						angular.extend(overlap, {class: 'bg-warning', msg: 'Had AEC'});
					else if (overlap.hasorm)
						angular.extend(overlap, {class: 'bg-danger', msg: 'Had ORM'});


					if (angular.equals({}, overlap))
						return;

					student.overlap = overlap;
				});
			};

			utils.updateAttendance = function (date, student) {
				//  One Request
				var referralIds = student.referred.map(function (o) {
					return o.Id;
				});
				var referred = student.referred.map(function (o) {
					return {Id: o.Id, HasFolder: o.HasFolder, assignment: o.assignment};
				});
				var urlEncoded = {id: student.id};
				var payload = {
					ActionType: student.radioModel,
					Comment: student.comment,
					Date: date,
					referrals: referralIds,
					referred: referred
				};
				return resource.update(urlEncoded, payload).$promise;
			}


			return angular.extend(resource, utils);

		}]);
}(angular.module("Argus")));


/* Activities */
(function (app) {
	app
		.factory("ActivitiesService", ["$resource", function ($resource) {
			return $resource('api/activities/:id', {}, {
				update: {
					method: 'PUT'
				}
			});

		}]);
}(angular.module("Argus")));

/* Counters */
(function (app) {
	app
		.factory("CountersService", ["$resource", function ($resource) {
			return $resource('api/counters/:id', {}, {
				update: {
					method: 'PUT'
				}
			});

		}]);
}(angular.module("Argus")));

/* Utility Functions */
(function (app) {
	app
		.factory("UtilService", ['ReferralTypesService', function (types) {
			return {
				markOroomOverlaps: function (students) {
					angular.forEach(students, function (student) {
						var status = {classs: '', action: ''};
						var overlap = {};
						var hasoss = false, hasiss = false, hasaec = false, hasoroom = false, hasreteach = false;
						angular.forEach(student.referred, function (ref, $index) {
							if (types.isAEC(ref.ReferralTypeId))
								hasaec = true;
//								else if (types.isORM(ref.ReferralTypeId))
//									hasoroom = true;
							else if (types.isISS(ref.ReferralTypeId))
								hasiss = true;
							else if (types.isOSS(ref.ReferralTypeId))
								hasoss = true;
							else if (types.isReteach(ref.ReferralTypeId))
								hasreteach = true;
						});
						if (hasoss)
							overlap = {class: 'bg-danger', msg: 'Has OSS'};
						else if (hasiss)
							overlap = {class: 'bg-danger', msg: 'Has ISS'};
//							else if (hasoroom)
//								overlap = {class: 'bg-warning', msg: 'Has ORoom'};
						else if (hasaec)
							overlap = {class: 'bg-warning', msg: 'Has AEC'};
						else if (hasreteach)
							overlap = {class: 'bg-warning', msg: 'Has Reteach'};
						student.overlap = overlap;

					});

				},

				getStudentOverlaps: function (student) {
					var overlap = {};
					angular.forEach(student.referred, function (ref) {

						if (types.isORM(ref.ReferralTypeId)) {
							overlap.hasorm = true;
							if (ref.ActivityTypeId == 88) overlap.ormcleared = true;
						} else if (types.isISS(ref.ReferralTypeId)) {
							overlap.hasiss = true;
							if (ref.ActivityTypeId == 87) overlap.isscleared = true;
						}
						else if (types.isOSS(ref.ReferralTypeId))
							overlap.hasoss = true;
						else if (types.isReteach(ref.ReferralTypeId)) {
							overlap.hasreteach = true;
							if (ref.ActivityTypeId == 66) overlap.reteachcleared = true;
						} else if (types.isAEC(ref.ReferralTypeId)) {
							overlap.hasaec = true;
							if (ref.ActivityTypeId == 51) overlap.aeccleared = true;
						}
					});
					return overlap;
				},
				getShades: function (color1, color2, shades) {
					var midpoints = shades - 2;
					// remove hashtag
					color1 = color1.substr(1);
					color2 = color2.substr(1);
					var color1Comp = {
						R: ParseInt(color1.slice(0, 2), 16),
						B: ParseInt(color1.slice(2, 4), 16),
						G: ParseInt(color1.slice(4), 16)
					};
					var color2Comp = {
						R: ParseInt(color2.slice(0, 2), 16),
						B: ParseInt(color2.slice(2, 4), 16),
						G: ParseInt(color2.slice(4), 16)
					};

					var stepsSizes = {
						R: stepSize(color1Comp.R, color2Comp.R),
						B: stepSize(color1Comp.B, color2Comp.B),
						G: stepSize(color1Comp.G, color2Comp.G)
					};

					function stepSize(c1, c2) {
						return (ceil(abs(c1 - c2)) / (midpoints + 1) );
					}

					function shade(c1, c2, i) {

					}

					var shades = [];
					for (var i; i < midpoints; i++) {
						var newShadeComponents = {
							R: shade(color1Comp.R, color2Comp.R),
							B: shade(color1Comp.B, color2Comp.B),
							G: shade(color1Comp.G, color2Comp.G)
						};

					}

					return shades;
				},
				downloadCSV: function (text, fileName) {
					var element = document.createElement('a');
					element.setAttribute('href', 'data:text/plain;charset=utf-8,%EF%BB%BF' + encodeURIComponent(text));
					element.setAttribute('download', fileName + '.csv');
					element.style.display = 'none';
					document.body.appendChild(element);
					element.click();
					document.body.removeChild(element);
				}

			};

		}]);
}(angular.module("Argus")));

/* Referral Types */
(function (app) {
	app.factory('ReferralTypesService', function () {
		return {
			oroom: [1, 2, 3, 16, 19],
			aec: [12],
			iss: [5, 6, 7, 10, 15, 17],
			reteach: [18],
			oss: [11],
			isAEC: function (type) {
				return this.aec.indexOf(type) !== -1;
			},
			isORM: function (type) {
				return this.oroom.indexOf(type) !== -1;
			},
			isISS: function (type) {
				return this.iss.indexOf(type) !== -1;
			},
			isOSS: function (type) {
				return this.oss.indexOf(type) !== -1;
			},
			isReteach: function (type) {
				return this.reteach.indexOf(type) !== -1;
			}
		};
	});

}(angular.module("Argus")));

/* Development Common Functions */
(function (app) {
	app
		.factory("DevService", ["$resource", function ($resource) {
			return {
				openError: function (error) {
					var wnd = window.open("about:blank", "", "_blank");
					wnd.document.write(error.data);
				}
			};

		}]);
}(angular.module("Argus")));

/* Time Format Functions */
(function (app) {
	app
		.factory("FormatTimeService", ["$resource", function ($resource) {
			return {
				formatAMPM: function (date) {
					var hours = date.getHours();
					var minutes = date.getMinutes();
					var seconds = date.getSeconds();
					var ampm = hours >= 12 ? 'pm' : 'am';
					hours = hours % 12;
					hours = hours ? hours : 12; // the hour '0' should be '12'
					hours = hours < 10 ? '0' + hours : hours;
					minutes = minutes < 10 ? '0' + minutes : minutes;
					seconds = seconds < 10 ? '0' + seconds : seconds;
					var strTime = hours + ':' + minutes + ':' + seconds + ' ' + ampm;
					return strTime;
				},
				formatTime24: function (date) {
					var hours = date.getHours();
					var minutes = date.getMinutes();
					var seconds = '00';
					hours = hours < 10 ? '0' + hours : hours;
					minutes = minutes < 10 ? '0' + minutes : minutes;
					var strTime = hours + ":" + minutes + ":" + seconds;
					return strTime;
				},
				formatDate: function (date) {
					var month = date.getMonth() + 1;
					var day = date.getDate();
					var year = date.getFullYear();
					var strDate = month + '/' + day + "/" + year;
					return strDate;
				}
			};

		}]);
}(angular.module("Argus")));

/* UserActions */
(function (app) {
	'use strict';
	app
		.factory('UserActionsService', ["$resource", function ($resource) {
			return $resource('api/useractions/:id', {}, {
				update: {
					method: 'PUT'
				}
			});
		}]);

}(angular.module("Argus")));

/* Passes Service */
(function (app) {
	app.factory("PassesService", ["$resource", function ($resource) {
		return $resource(api + "printPasses/:id", {}, {
			pdf: {
				method: 'POST',
				headers: {accept: 'application/pdf'},
				responseType: 'arraybuffer',
				cache: true,
				transformResponse: function (data) {

					var pdf;
					if (data) {
						pdf = new Blob([data], {type: 'application/pdf'});
					}
					return {
						response: pdf
					};
				}
			}
		});
	}]);
}(angular.module("Argus")));

/* Reports Service */
(function (app) {
	app.factory('ReportsService', ['$resource', function ($resource) {
		return $resource(api + "report-eod-all-pdf", {}, {
			EODAll: {
				method: 'GET',
				headers: {accept: 'application/pdf'},
				responseType: 'arraybuffer',
				cache: true,
				transformResponse: function (data) {

					var pdf;
					if (data) {
						pdf = new Blob([data], {type: 'application/pdf'});
					}
					return {
						response: pdf
					};
				}
			}
		});
	}])

}(angular.module('Argus')));

/* Assignments File */
(function (app) {
	app.factory("assignmentsService", ["$resource", function ($resource) {
		return $resource("/api/assignments/:id", {id: '@id'}, {
			pdf: {
				method: 'GET',
				headers: {accept: 'application/pdf'},
				responseType: 'arraybuffer',
				cache: true,
				transformResponse: function (data) {
					console.log(data);
					var pdf;
					if (data) {
						pdf = new Blob([data], {type: 'application/pdf'});
					}
					return {
						response: pdf
					};
				}
			}
		});
	}]);
}(angular.module("Argus")));

/* Assignments List */
(function (app) {
	app.factory("assignmentsListService", ["$resource", function ($resource) {
		return $resource("/api/assignments/:id", {id: '@id'}, {
			pdf: {
				method: 'GET',
				headers: {accept: 'application/pdf'},
				responseType: 'arraybuffer',
				cache: true,
				transformResponse: function (data) {
					console.log(data);
					var pdf;
					if (data) {
						pdf = new Blob([data], {type: 'application/pdf'});
					}
					return {
						response: pdf
					};
				}
			}
		});
	}]);
}(angular.module("Argus")));

/* Classes */
(function (app) {
	app
		.factory("classesService", ["$resource", function ($resource) {
			return $resource('api/classes/:id', {}, {
				update: {
					method: 'PUT'
				}
			});

		}]);
}(angular.module("Argus")));

/* fileUpload */
(function (app) {
	app
		.service('fileUploadService', ['$http', function ($http) {
			this.uploadFileToUrl = function (file, uploadUrl) {
				var fd = new FormData();
				fd.append('file', file);
				$http.post(uploadUrl, fd, {
						transformRequest: angular.identity,
						headers: {'Content-Type': undefined}
					})
					.success(function (data) {
						console.log("server Response " + data.message);
					})
					.error(function (err) {
						console.log("error, :" + err);
					}); // end $http.post
			};
		}]);
}(angular.module("Argus")));

/* Saturday School */
(function (app) {
	'use strict';
	app
		.factory("saturdaySchoolService", ["$http", function ($http) {
			return {
				get: function (date) {
					if (!date)
						date = new Date();
					return $http.get("/Saturday", {'data': formatDate(date)});
				},
				save: function (date, stuInfo) {
					return $http.put("/Saturday", {'date': formatDate(date), 'stuInfo': stuInfo});

				}
			};
		}]);
}(angular.module("Argus")));

(function (app) {
	app.factory('PrintHtmlService', ['$resource', function ($resource) {
		var functions = {};
		var resource = $resource(api + "report-print/:id", {}, {
			print: {
				method: 'POST',
				headers: {accept: 'application/pdf'},
				responseType: 'arraybuffer',
				cache: true,
				transformResponse: function (data) {
					console.log(data);
					var pdf;
					if (data) {
						pdf = new Blob([data], {type: 'application/pdf'});
					}
					return {
						response: pdf
					};
				}
			}
		});
		functions.printDiv = function (totalsId, listId, chartsId) {

			var totals = document.getElementById(totalsId).innerHTML;
			var list = document.getElementById(listId)? document.getElementById(listId).innerHTML : null;
			var charts = document.getElementById(chartsId)? document.getElementById(chartsId).innerHTML : null;
			//var header = document.getElementById('doc-header').innerHTML;
			//var ship = document.getElementById('doc-ship-info').innerHTML;
			//var cust = document.getElementById('doc-cust-info').innerHTML;
			//var products = document.getElementById('doc-products').innerHTML;
			//var footer = document.getElementById('doc-footer').innerHTML;
			resource.print({
				totals:totals,
				list: list,
				charts:charts
				//head: header,
				//ship: ship,
				//cust: cust,
				//products: products,
				//footer: footer,
			}, function (data) {
				var fileURL = URL.createObjectURL(data.response);
				window.open(fileURL);
			});

		};

		return angular.extend(functions,resource);
	}])
}(angular.module('Argus')));



